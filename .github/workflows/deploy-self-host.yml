#
name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches: ['133-add-docker-support']

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      #
    environment: Develop
    env:
      XATA_API_KEY: ${{ secrets.XATA_API_KEY }}
      XATA_FALLBACK_BRANCH: ${{ vars.XATA_FALLBACK_BRANCH }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      ENABLE_TRACK: ${{ vars.ENABLE_TRACK }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create Env
        run: |
          touch .env
          echo XATA_API_KEY="$XATA_API_KEY" >> .env
          echo XATA_FALLBACK_BRANCH="$XATA_FALLBACK_BRANCH" >> .env
          echo SENTRY_AUTH_TOKEN="$SENTRY_AUTH_TOKEN" >> .env
          echo ENABLE_TRACK="$ENABLE_TRACK" >> .env
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      # - name: Log in to the Container registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
      - name: Login to ACR
        uses: aliyun/acr-login@v1
        with:
          login-server: https://registry.cn-hongkong.aliyuncs.com
          username: "${{ secrets.REGISTRY_USERNAME }}"
          password: "${{ secrets.REGISTRY_PASSWORD }}"
      - name: Build and push image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t registry.cn-hongkong.aliyuncs.com/fec/web:$IMAGE_TAG .
          docker push registry.cn-hongkong.aliyuncs.com/fec/web:$IMAGE_TAG